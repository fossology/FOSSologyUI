{"version":3,"sources":["pages/Organize/Uploads/Delete/index.jsx"],"names":["UploadDelete","useState","folderId","uploadId","deleteUploadFolderData","setDeleteUploadFolderData","id","name","description","parent","folderList","setFolderList","uploadFolderList","setUploadFolderList","loading","setLoading","showMessage","setShowMessage","type","text","message","setMessage","handleChange","e","target","multiple","Array","from","selectedOptions","option","value","useEffect","getAllFolders","then","res","getUploadsFolderId","title","className","setShow","onChange","options","property","onClick","preventDefault","length","forEach","deleteUploadsbyId","parseInt","messages","scheduleUploadDeletion","catch","error","finally","selectUploadsToDelete","as","animation","size","role"],"mappings":"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","file":"static/js/58.acbd4272.chunk.js","sourcesContent":["/*\n Copyright (C) 2021 Shruti Agarwal (mail2shruti.ag@gmail.com), Aman Dwivedi (aman.dwivedi5@gmail.com)\n\n SPDX-License-Identifier: GPL-2.0\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public License\n version 2 as published by the Free Software Foundation.\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport messages from \"constants/messages\";\n\n// Title\nimport Title from \"components/Title\";\n\n// Widgets\nimport { Alert, Button, InputContainer, Spinner } from \"components/Widgets\";\n\n// Required functions for calling APIs\nimport { getAllFolders } from \"services/folders\";\nimport {\n  getUploadsFolderId,\n  deleteUploadsbyId,\n} from \"services/organizeUploads\";\n\nconst UploadDelete = () => {\n  const initialState = {\n    folderId: 1,\n    uploadId: null,\n  };\n  const initialFolderList = [\n    {\n      id: 1,\n      name: \"Software Repository\",\n      description: \"Top Folder\",\n      parent: null,\n    },\n  ];\n  const initialMessage = {\n    type: \"success\",\n    text: \"\",\n  };\n\n  // Data required for deleting the upload\n  const [deleteUploadFolderData, setDeleteUploadFolderData] =\n    useState(initialState);\n\n  // Setting the list for all the folders names\n  const [folderList, setFolderList] = useState(initialFolderList);\n\n  // Setting the list for all the uploads of respective folders\n  const [uploadFolderList, setUploadFolderList] = useState([]);\n\n  // State Variables for handling Error Boundaries\n  const [loading, setLoading] = useState(false);\n  const [showMessage, setShowMessage] = useState(false);\n  const [message, setMessage] = useState(initialMessage);\n\n  const handleChange = (e) => {\n    if (e.target.multiple) {\n      return setDeleteUploadFolderData({\n        ...deleteUploadFolderData,\n        [e.target.name]: Array.from(\n          e.target.selectedOptions,\n          (option) => option.value\n        ),\n      });\n    }\n    return setDeleteUploadFolderData({\n      ...deleteUploadFolderData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    if (deleteUploadFolderData?.uploadId?.length > 0) {\n      deleteUploadFolderData?.uploadId?.forEach((id) => {\n        return deleteUploadsbyId(parseInt(id, 10))\n          .then(() => {\n            setMessage({\n              type: \"success\",\n              text: messages.scheduleUploadDeletion,\n            });\n            getUploadsFolderId(deleteUploadFolderData.folderId).then((res) => {\n              setUploadFolderList(res);\n            });\n          })\n          .catch((error) => {\n            setMessage({\n              type: \"danger\",\n              text: error.message,\n            });\n          })\n          .finally(() => {\n            setLoading(false);\n            setShowMessage(true);\n          });\n      });\n    } else {\n      setLoading(false);\n      setShowMessage(true);\n      setMessage({\n        type: \"danger\",\n        text: messages.selectUploadsToDelete,\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAllFolders().then((res) => {\n      setFolderList(res);\n    });\n    getUploadsFolderId(deleteUploadFolderData.folderId).then((res) => {\n      setUploadFolderList(res);\n    });\n  }, [deleteUploadFolderData.folderId, deleteUploadFolderData.uploadId]);\n\n  return (\n    <>\n      <Title title=\"Delete Uploads\" />\n      <div className=\"main-container my-3\">\n        {showMessage && (\n          <Alert\n            type={message.type}\n            setShow={setShowMessage}\n            message={message.text}\n          />\n        )}\n        <h1 className=\"font-size-main-heading mb-4\">Delete Uploaded File</h1>\n        <div className=\"row\">\n          <div className=\"col-lg-8 col-md-12 col-sm-12 col-12\">\n            <p>Select the uploaded file to delete</p>\n            <ul>\n              <li>This will delete the upload file!</li>\n              <li>\n                Be very careful with your selection since you can delete a lot\n                of work!\n              </li>\n              <li>\n                All analysis only associated with the deleted upload file will\n                also be deleted.\n              </li>\n              <li>\n                THERE IS NO UNDELETE. When you select something to delete, it\n                will be removed from the database and file repository.\n              </li>\n            </ul>\n            <p>Select the uploaded file to delete:</p>\n            <ul>\n              <li>\n                <InputContainer\n                  type=\"select\"\n                  name=\"folderId\"\n                  id=\"organize-upload-folder-list\"\n                  onChange={(e) => handleChange(e)}\n                  options={folderList}\n                  property=\"name\"\n                  value={folderList?.id}\n                >\n                  Select the folder containing the file to delete:\n                </InputContainer>\n              </li>\n              <li className=\"mt-4\">\n                <InputContainer\n                  type=\"select\"\n                  name=\"uploadId\"\n                  id=\"organize-upload-list\"\n                  onChange={(e) => handleChange(e)}\n                  options={uploadFolderList}\n                  value={uploadFolderList.id}\n                  property=\"uploadname\"\n                  multiple\n                >\n                  Select the uploaded project to delete:\n                </InputContainer>\n              </li>\n            </ul>\n            <Button type=\"submit\" onClick={handleSubmit} className=\"mt-4\">\n              {loading ? (\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n              ) : (\n                \"Delete\"\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadDelete;\n"],"sourceRoot":""}