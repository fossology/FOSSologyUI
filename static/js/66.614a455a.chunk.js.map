{"version":3,"sources":["pages/Jobs/AllJobs/index.jsx"],"names":["AllJobs","useState","jobsDataList","setJobsDataList","page","limit","jobsData","setJobsData","query","setQuery","initialMessage","message","setMessage","showMessage","setShowMessage","pagesOptions","setPagesOptions","pages","setPages","useEffect","type","text","messages","loading","getAllAdminJob","then","res","date","arr","i","length","queueDate","Date","toLocaleDateString","weekday","year","month","day","arrPages","push","id","value","catch","error","handleError","handlePageChange","e","title","className","setShow","colSpan","name","onChange","target","handleChange","options","entriesOptions","property","placeholder","event","filter","post","toLowerCase","includes","map","data","status","count","maxLength","size"],"mappings":"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","file":"static/js/66.614a455a.chunk.js","sourcesContent":["/*\n Copyright (C) 2021 Aman Dwivedi (aman.dwivedi5@gmail.com), Shruti Agarwal (mail2shruti.ag@gmail.com),\n Copyright (C) 2022 Soham Banerjee (sohambanerjee4abc@hotmail.com)\n\n SPDX-License-Identifier: GPL-2.0\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public License\n version 2 as published by the Free Software Foundation.\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n*/\n\nimport React, { useEffect, useState } from \"react\";\n\n// Title\nimport Title from \"components/Title\";\n\n// Required functions for API and Error handling\nimport { handleError } from \"shared/helper\";\nimport { initialMessage, entriesOptions } from \"constants/constants\";\nimport messages from \"constants/messages\";\nimport { InputContainer, Alert } from \"components/Widgets\";\nimport { getAllAdminJob } from \"services/jobs\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst AllJobs = () => {\n  const initialState = {\n    page: 1,\n    limit: 10,\n  };\n  // Setting the browse data to the table\n  const [jobsDataList, setJobsDataList] = useState();\n  const [jobsData, setJobsData] = useState(initialState);\n  // variable for searching in the datatable\n  const [query, setQuery] = useState(\"\");\n\n  // State Variables for handling Error Boundaries\n  const [message, setMessage] = useState(initialMessage);\n  const [showMessage, setShowMessage] = useState(false);\n  const [pagesOptions, setPagesOptions] = useState();\n  const [pages, setPages] = useState();\n\n  function Dateformatter(date) {\n    const options = {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    };\n    const d = new Date(date);\n    return d.toLocaleDateString(\"en-US\", options);\n  }\n\n  useEffect(() => {\n    setMessage({\n      type: \"success\",\n      text: messages.loading,\n    });\n    setShowMessage(true);\n    getAllAdminJob(jobsData)\n      .then((res) => {\n        // Formatting the date from time stamp to readable date\n        setShowMessage(false);\n        const arr = [];\n        for (let i = 0; i < res.res.length; i++) {\n          res.res[i].queueDate = Dateformatter(res.res[i].queueDate);\n          arr[i] = res.res[i];\n        }\n        setPages(res.pages);\n        // Creating pagination\n        const arrPages = [];\n        for (let i = 0; i < res.pages; i++) {\n          arrPages.push({\n            id: i + 1,\n            value: i + 1,\n          });\n        }\n        setPagesOptions(arrPages);\n        setJobsDataList(arr);\n        setShowMessage(false);\n      })\n      .catch((error) => {\n        handleError(error, setMessage);\n        setShowMessage(true);\n      });\n  }, [jobsData]);\n\n  const handleChange = (e) => {\n    if (e.target.name === \"limit\") {\n      setJobsData({\n        ...jobsData,\n        [e.target.name]: e.target.value,\n        page: 1,\n      });\n    } else {\n      setJobsData({\n        ...jobsData,\n        [e.target.name]: e.target.value,\n        page: 1,\n      });\n    }\n  };\n  const handlePageChange = (e, value) => {\n    if (value >= 1) {\n      setPages(value);\n      setJobsData({ ...jobsData, [`page`]: value });\n    }\n  };\n\n  return (\n    <>\n      <Title title=\"Show Jobs\" />\n      <div className=\"main-container my-3 text-center\">\n        {showMessage && (\n          <Alert\n            type={message.type}\n            setShow={setShowMessage}\n            message={message.text}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-md-3 col-lg-2\">\n            <h2 className=\"font-size-sub-heading\">All Jobs</h2>\n          </div>\n          <div className=\"col-md-9 col-lg-10\">\n            <table className=\"table table-striped text-primary-color font-size-medium table-responsive-sm table-bordered\">\n              <thead>\n                <tr>\n                  <th colSpan=\"6\" className=\"font-size-sub-heading text-center\">\n                    All Recent Jobs\n                  </th>\n                </tr>\n                <tr className=\"font-demi\">\n                  <td colSpan=\"6\" className=\"p-2 m-2 text-left\">\n                    <span className=\"mt-1 \">Show entries: </span>\n                    <InputContainer\n                      name=\"limit\"\n                      type=\"select\"\n                      onChange={(e) => handleChange(e)}\n                      options={entriesOptions}\n                      property=\"entry\"\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <th>\n                    <input\n                      type=\"search\"\n                      className=\"form-control\"\n                      placeholder=\"Filter Jobs\"\n                      onChange={(event) => setQuery(event.target.value)}\n                    />\n                  </th>\n                  <th />\n                </tr>\n                <tr className=\"font-bold text-center\">\n                  <th>Job Name</th>\n                  <th>Queue Date</th>\n                  <th>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {jobsDataList\n                  ?.filter((post) => {\n                    if (query === \"\") {\n                      return post;\n                    }\n                    if (post?.name.toLowerCase().includes(query.toLowerCase()))\n                      return post;\n                    return null;\n                  })\n                  .map((data) => (\n                    <tr className=\"text-center\">\n                      <td>\n                        <div className=\"font-demi\">{data?.name}</div>\n                      </td>\n                      <td>\n                        <div className=\"font-demi\">{data?.queueDate}</div>\n                      </td>\n                      <td>{data?.status}</td>\n                    </tr>\n                  ))}\n                <tr className=\"text-left\">\n                  <td colSpan=\"6\">\n                    <div className=\"right-pagination\">\n                      Page:\n                      {pagesOptions && (\n                        <div className=\"row\">\n                          <Pagination\n                            name=\"page\"\n                            className=\"col-md-6 pagination-div \"\n                            property=\"value\"\n                            count={pages}\n                            page={jobsData.page}\n                            onChange={handlePageChange}\n                          />\n\n                          <div className=\"row\">\n                            Go to Page: &nbsp;\n                            <input\n                              type=\"number\"\n                              maxLength=\"4\"\n                              size=\"3\"\n                              className=\"pagination-textarea\"\n                              onChange={(event) =>\n                                handlePageChange(event, event.target.value)\n                              }\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AllJobs;\n"],"sourceRoot":""}